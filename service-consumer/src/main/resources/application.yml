server:
  port: 7001
  servlet:
    context-path: /consumer

eureka:
  client:
    service-url:
      defaultZone: http://localhost:8761/eureka/

spring:
  application:
    name: service-consumer

service-provider: #服务提供方的服务id
  ribbon:
    NFLoadBalancerRuleClassName: com.netflix.loadbalancer.BestAvailableRule

  #RoundRobinRule：轮询；
  #RandomRule：随机；
  #AvailabilityFilteringRule：会先过滤掉由于多次访问故障而处于断路器状态的服务，还有并发的连接数量超过阈值的服务，然后对剩余的服务列表按照轮询策略进行访问；
  #WeightedResponseTimeRule：根据平均响应时间计算所有服务的权重，响应时间越快的服务权重越大被选中的概率越大。刚启动时如果统计信息不足，则使用RoundRobinRule（轮询）策略，等统计信息足够，会切换到WeightedResponseTimeRule；
  #RetryRule：先按照RoundRobinRule（轮询）策略获取服务，如果获取服务失败则在指定时间内进行重试，获取可用的服务；
  #BestAvailableRule：会先过滤掉由于多次访问故障而处于断路器跳闸状态的服务，然后选择一个并发量最小的服务；
  #ZoneAvoidanceRule：复合判断Server所在区域的性能和Server的可用性选择服务器；

#hystrix超时时间
  #1.默认：（方法上记得要加上@HystrixCommand，否则无效）：
  hystrix:
    command:
      default:
        execution:
          isolation:
            thread:
              timeoutInMilliseconds: 6000

  #2.配置具体方法的超时时间
      serverMethod:
        execution:
          isolation:
            thread:
              timeoutInMilliseconds: 6000